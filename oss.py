# -*- coding: UTF-8 -*-query = "{query}"import timeimport oss2import osfrom AppKit import NSPasteboard, NSPasteboardTypePNG, NSFilenamesPboardTypeaccess_key_id = os.getenv('access_key_id')access_key_secret = os.getenv('access_key_secret')bucket_name = os.getenv('bucket_name')endpoint = os.getenv('endpoint')prefix = os.getenv('prefix', 'assets/')new_filename = os.getenv('new_filename', '%Y/%m/%d')# exts = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'svg', 'webp']def get_paste_img_file():    """    将剪切板数据保存到本地文件并返回文件路径    """    pb = NSPasteboard.generalPasteboard()  # 获取当前系统剪切板数据    data_type = pb.types()  # 获取剪切c板数据的格式类型    # 根据剪切板数据类型进行处理    if NSPasteboardTypePNG in data_type:          # PNG处理        data = pb.dataForType_(NSPasteboardTypePNG)        filename = '%s.png' % int(time.time())        filepath = '/tmp/%s' % filename            # 保存文件的路径        ret = data.writeToFile_atomically_(filepath, False)    # 将剪切板数据保存为文件        if ret:   # 判断文件写入是否成功            return filepath    elif NSFilenamesPboardType in data_type:        # file in machine        return pb.propertyListForType_(NSFilenamesPboardType)[0]def upload_file():    file_name = get_paste_img_file()    if not file_name:        print("err")        return    auth = oss2.Auth(access_key_id, access_key_secret)    bucket = oss2.Bucket(auth, endpoint, bucket_name)    key_name = file_name[file_name.rfind('/'):]    # file_ext = file_name[file_name.rfind('.') + 1:].lower()    # date = time.strftime("%Y-%m-%d", time.localtime())    date = time.strftime(new_filename, time.localtime())    key = prefix + date + key_name    result = bucket.put_object_from_file(key, file_name)    url = result.resp.response.url.replace('%2F', '/', 3)    ss = '![%s](%s)' % (key_name.replace('/', ''), url)    print(ss)if __name__ == '__main__':    upload_file()